option java_package = "com.mrmq.poker.common.proto";
option java_outer_classname = "PokerModelProto";

enum RoundType {
	SMALL_BLIND = 1;
	BIG_BLIND = 2;
	PRE_FLOP = 3; // Vòng Bet khi chưa mở lá Community Cards nào.
	FLOP = 4; // Vòng Bet khi đã mở 3 lá.
	TURN = 5; // Vòng Bet khi đã mở 4 lá.
	RIVER = 6; // Vòng Bet khi đã mở 5 lá.
	SHOW_DOWN = 7; // Vòng so bài.
	
	SMALL_BLIND_END = 11;
	BIG_BLIND_END = 12;
	PRE_FLOP_END = 13; // Vòng Bet khi chưa mở lá Community Cards nào.
	FLOP_END = 14; // Vòng Bet khi đã mở 3 lá.
	TURN_END = 15; // Vòng Bet khi đã mở 4 lá.
	RIVER_END = 16; // Vòng Bet khi đã mở 5 lá.
	SHOW_DOWN_END = 17; // Vòng so bài.
	WAITTING = 18;
}
	
message Table {
	required string roomId = 1;
	required string tableId = 2;
	required RoundType roundType = 3;
	required TableRule tableRule = 4;

	repeated Player players = 5;
	repeated Card boards = 7; //community-public card
	
	optional string dealerId = 8; //current dealer
	optional string nextPlayerId = 9; //Next Player
}

message TableRule {
	required int32 maxPlayer = 1;
	required int32 maxViewer = 2;
	required int32 minPlayer = 3;
	
	required int64 minRaise = 11;
	required int64 maxRaise = 13;
	
	required int64 smallBlind = 14;
	required int64 bigBlind = 15;
	
	required int32 timePerTurn = 16;
}

message Chip {
	required int64 bet = 1; //Bet for this Chip
	repeated Player contributors = 2; //Contributing players to this Chip
}

enum ActionType {
	CHECK = 1; //Xem
	BET = 2; //Cuoc
	RAISE = 3; //Nang cuoc
	CALL = 4; //Theo
	FOLD = 5; //Bỏ bài
	ALL_IN = 6; //Tat tay
	POST_BIG_BLIND = 7;
	CONTINUE = 8;
	POST_SMALL_BLIND = 9;
}

enum PlayerState {
	PLAYER_VIEWING = 0;
	PLAYER_WAITTING = 1;
	PLAYER_PLAYING = 2;
	PLAYER_FOLDED = 3;
}

message Player {
    //me = [inround,hatde,hatdebuy,position,avatarUrl,lastAction,[handcard*], rankname, gift];
	required string loginId = 1;
	optional string name = 2;
	optional string avatarUrl = 3;
	optional int64 balance = 4;
	
	optional PlayerState playerState = 11;
	optional int64 raise = 12;
	optional int32 position = 14;
	
	optional ActionType lastAction = 16;
	
	optional Hand hand = 17; //Hand of cards
	
	optional HandValue handValue = 18;
	optional int32 gift = 19;
	optional int32 straddle = 20;
	
	//when endGame
	repeated Card winCards = 21;
	optional int64 totalAmount = 22;
}

message Hand {
	required int32 maxCard = 1;
	repeated Card cards = 2;
}

message Deck {
	required int32 total_card = 52;
	repeated Card cards = 2;
}

message Card {
	required CardRank cardRank = 1;
	required Suits suit = 2;
	
	enum CardRank {
		DEUCE    = 0; //2
		THREE    = 1; //3
		FOUR     = 2; //4
		FIVE     = 3; //5
		SIX      = 4; //6
		SEVEN    = 5; //7
		EIGHT    = 6; //8
		NINE     = 7; //9
		TEN      = 8; //10
		JACK     = 9; //J
		QUEEN    = 10; //Q
		KING     = 11; //K
		ACE      = 12; //A
	}

	enum Suits {
		DIAMONDS = 0; //Ro
		CLUBS    = 1; //Tep
		HEARTS   = 2; //Co
		SPADES   = 3; //Bich
	}
}

enum HandValue {
	ROYAL_FLUSH = 9;
    STRAIGHT_FLUSH = 8;
    FOUR_OF_A_KIND = 7;
    FULL_HOUSE = 6;
    FLUSH = 5;
    STRAIGHT = 4;
    THREE_OF_A_KIND = 3;
    TWO_PAIRS = 2;
    ONE_PAIR = 1;
    HIGH_CARD = 0;
}

message Door {
	required string doorId = 1;
	optional string doorUrl = 2;
	repeated Hall halls = 3;
}

message Hall {
	required string hallId = 1;
	optional string title = 2;
	optional string hallUrl = 3;
	optional string doorId = 4;
	repeated Room rooms = 5;
}

message Room {
	required string roomId = 1;
	optional string title = 2;
	optional string hallId = 3;
	optional int32 maxTable = 4;
	required RoomState state = 5;
	repeated Table tables = 6;
	
	enum RoomState {
		AVAILABLE = 1;
		FULL = 2;
	}
}